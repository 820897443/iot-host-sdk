ARM GAS  /tmp/ccdVCZVK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"emh_module.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.emh_ev_unknown,"ax",%progbits
  18              		.align	1
  19              		.weak	emh_ev_unknown
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	emh_ev_unknown:
  26              	.LFB5:
  27              		.file 1 "src/helper/emhost/emh_module.c"
   1:src/helper/emhost/emh_module.c **** /**
   2:src/helper/emhost/emh_module.c ****  ******************************************************************************
   3:src/helper/emhost/emh_module.c ****  * @file    emh_module.c
   4:src/helper/emhost/emh_module.c ****  * @author  William Xu
   5:src/helper/emhost/emh_module.c ****  * @version V1.0.0
   6:src/helper/emhost/emh_module.c ****  * @date    9-Apr-2018
   7:src/helper/emhost/emh_module.c ****  * @brief   EMW module operation AT commands
   8:src/helper/emhost/emh_module.c ****  ******************************************************************************
   9:src/helper/emhost/emh_module.c ****  *
  10:src/helper/emhost/emh_module.c ****  * Copyright (c) 2009-2018 MXCHIP Co.,Ltd.
  11:src/helper/emhost/emh_module.c ****  *
  12:src/helper/emhost/emh_module.c ****  * Licensed under the Apache License, Version 2.0 (the "License");
  13:src/helper/emhost/emh_module.c ****  * you may not use this file except in compliance with the License.
  14:src/helper/emhost/emh_module.c ****  * You may obtain a copy of the License at
  15:src/helper/emhost/emh_module.c ****  *
  16:src/helper/emhost/emh_module.c ****  *     http://www.apache.org/licenses/LICENSE-2.0
  17:src/helper/emhost/emh_module.c ****  *
  18:src/helper/emhost/emh_module.c ****  * Unless required by applicable law or agreed to in writing, software
  19:src/helper/emhost/emh_module.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  20:src/helper/emhost/emh_module.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:src/helper/emhost/emh_module.c ****  * See the License for the specific language governing permissions and
  22:src/helper/emhost/emh_module.c ****  * limitations under the License.
  23:src/helper/emhost/emh_module.c ****  *
  24:src/helper/emhost/emh_module.c ****  ******************************************************************************
  25:src/helper/emhost/emh_module.c ****  */
  26:src/helper/emhost/emh_module.c **** 
  27:src/helper/emhost/emh_module.c **** 
  28:src/helper/emhost/emh_module.c **** #include "ATCmdParser/ATCmdParser.h"
  29:src/helper/emhost/emh_module.c **** #include "emh_api.h"
  30:src/helper/emhost/emh_module.c **** 
  31:src/helper/emhost/emh_module.c **** /******************************************************************************
ARM GAS  /tmp/ccdVCZVK.s 			page 2


  32:src/helper/emhost/emh_module.c ****  *                              Variable Definitions
  33:src/helper/emhost/emh_module.c ****  ******************************************************************************/
  34:src/helper/emhost/emh_module.c **** 
  35:src/helper/emhost/emh_module.c **** static char _fw_version[32];
  36:src/helper/emhost/emh_module.c **** 
  37:src/helper/emhost/emh_module.c **** /******************************************************************************
  38:src/helper/emhost/emh_module.c ****  *                             Function Declarations
  39:src/helper/emhost/emh_module.c ****  ******************************************************************************/
  40:src/helper/emhost/emh_module.c **** 
  41:src/helper/emhost/emh_module.c **** extern void emh_alisds_event_handler(void);
  42:src/helper/emhost/emh_module.c **** extern void emh_wlan_event_handler(void);
  43:src/helper/emhost/emh_module.c **** 
  44:src/helper/emhost/emh_module.c **** /******************************************************************************
  45:src/helper/emhost/emh_module.c ****  *                              Function Definitions
  46:src/helper/emhost/emh_module.c ****  ******************************************************************************/
  47:src/helper/emhost/emh_module.c **** MX_WEAK void emh_ev_unknown(void)
  48:src/helper/emhost/emh_module.c **** {
  28              		.loc 1 48 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  49:src/helper/emhost/emh_module.c **** 	return;
  50:src/helper/emhost/emh_module.c **** }
  33              		.loc 1 50 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE5:
  38              		.section	.text.emh_module_reset,"ax",%progbits
  39              		.align	1
  40              		.global	emh_module_reset
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	emh_module_reset:
  47              	.LFB6:
  51:src/helper/emhost/emh_module.c **** 
  52:src/helper/emhost/emh_module.c **** mx_status emh_module_reset(void)
  53:src/helper/emhost/emh_module.c **** {
  48              		.loc 1 53 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52 0000 10B5     		push	{r4, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 4, -8
  56              		.cfi_offset 14, -4
  54:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+REBOOT")
  57              		.loc 1 54 0
  58 0002 1648     		ldr	r0, .L13
  59 0004 FFF7FEFF 		bl	ATCmdParser_send
  60              	.LVL0:
  61 0008 20B3     		cbz	r0, .L7
  55:src/helper/emhost/emh_module.c **** 	&&  ATCmdParser_recv("OK\r\n"))) {
  62              		.loc 1 55 0 discriminator 1
ARM GAS  /tmp/ccdVCZVK.s 			page 3


  63 000a 1548     		ldr	r0, .L13+4
  64 000c FFF7FEFF 		bl	ATCmdParser_recv
  65              	.LVL1:
  54:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+REBOOT")
  66              		.loc 1 54 0 discriminator 1
  67 0010 08B1     		cbz	r0, .L11
  68              	.LBB2:
  56:src/helper/emhost/emh_module.c **** 		return kGeneralErr;
  57:src/helper/emhost/emh_module.c **** 	}
  58:src/helper/emhost/emh_module.c **** 	for (int i = 0; i < 5; i++) {
  69              		.loc 1 58 0
  70 0012 0024     		movs	r4, #0
  71 0014 03E0     		b	.L4
  72              	.L11:
  73              	.LBE2:
  56:src/helper/emhost/emh_module.c **** 		return kGeneralErr;
  74              		.loc 1 56 0
  75 0016 4FF0FF30 		mov	r0, #-1
  76 001a 1AE0     		b	.L2
  77              	.LVL2:
  78              	.L5:
  79              	.LBB3:
  80              		.loc 1 58 0 discriminator 2
  81 001c 0134     		adds	r4, r4, #1
  82              	.LVL3:
  83              	.L4:
  84              		.loc 1 58 0 is_stmt 0 discriminator 1
  85 001e 042C     		cmp	r4, #4
  86 0020 15DC     		bgt	.L12
  59:src/helper/emhost/emh_module.c **** 		if (ATCmdParser_send("AT")
  87              		.loc 1 59 0 is_stmt 1
  88 0022 1048     		ldr	r0, .L13+8
  89 0024 FFF7FEFF 		bl	ATCmdParser_send
  90              	.LVL4:
  91 0028 0028     		cmp	r0, #0
  92 002a F7D0     		beq	.L5
  60:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_recv("OK\r\n")
  93              		.loc 1 60 0
  94 002c 0C48     		ldr	r0, .L13+4
  95 002e FFF7FEFF 		bl	ATCmdParser_recv
  96              	.LVL5:
  97 0032 0028     		cmp	r0, #0
  98 0034 F2D0     		beq	.L5
  61:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_send("AT+UARTE=OFF")
  99              		.loc 1 61 0
 100 0036 0C48     		ldr	r0, .L13+12
 101 0038 FFF7FEFF 		bl	ATCmdParser_send
 102              	.LVL6:
 103 003c 0028     		cmp	r0, #0
 104 003e EDD0     		beq	.L5
  62:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_recv("OK\r\n")) {
 105              		.loc 1 62 0
 106 0040 0748     		ldr	r0, .L13+4
 107 0042 FFF7FEFF 		bl	ATCmdParser_recv
 108              	.LVL7:
 109 0046 0028     		cmp	r0, #0
 110 0048 E8D0     		beq	.L5
ARM GAS  /tmp/ccdVCZVK.s 			page 4


  63:src/helper/emhost/emh_module.c **** 			return kNoErr;
 111              		.loc 1 63 0
 112 004a 0020     		movs	r0, #0
 113 004c 01E0     		b	.L2
 114              	.L12:
 115              	.LBE3:
  64:src/helper/emhost/emh_module.c **** 		}
  65:src/helper/emhost/emh_module.c **** 	}
  66:src/helper/emhost/emh_module.c **** 	return kGeneralErr;
 116              		.loc 1 66 0
 117 004e 4FF0FF30 		mov	r0, #-1
 118              	.LVL8:
 119              	.L2:
  67:src/helper/emhost/emh_module.c **** }
 120              		.loc 1 67 0
 121 0052 10BD     		pop	{r4, pc}
 122              	.L7:
  56:src/helper/emhost/emh_module.c **** 	}
 123              		.loc 1 56 0
 124 0054 4FF0FF30 		mov	r0, #-1
 125 0058 FBE7     		b	.L2
 126              	.L14:
 127 005a 00BF     		.align	2
 128              	.L13:
 129 005c 00000000 		.word	.LC0
 130 0060 0C000000 		.word	.LC1
 131 0064 14000000 		.word	.LC2
 132 0068 18000000 		.word	.LC3
 133              		.cfi_endproc
 134              	.LFE6:
 136              		.section	.text.emh_module_restore_settings,"ax",%progbits
 137              		.align	1
 138              		.global	emh_module_restore_settings
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	emh_module_restore_settings:
 145              	.LFB7:
  68:src/helper/emhost/emh_module.c **** 
  69:src/helper/emhost/emh_module.c **** mx_status emh_module_restore_settings(void)
  70:src/helper/emhost/emh_module.c **** {
 146              		.loc 1 70 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150 0000 10B5     		push	{r4, lr}
 151              	.LCFI1:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 4, -8
 154              		.cfi_offset 14, -4
  71:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+FACTORY")
 155              		.loc 1 71 0
 156 0002 1648     		ldr	r0, .L26
 157 0004 FFF7FEFF 		bl	ATCmdParser_send
 158              	.LVL9:
 159 0008 20B3     		cbz	r0, .L20
ARM GAS  /tmp/ccdVCZVK.s 			page 5


  72:src/helper/emhost/emh_module.c **** 	&&  ATCmdParser_recv("OK\r\n"))) {
 160              		.loc 1 72 0 discriminator 1
 161 000a 1548     		ldr	r0, .L26+4
 162 000c FFF7FEFF 		bl	ATCmdParser_recv
 163              	.LVL10:
  71:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+FACTORY")
 164              		.loc 1 71 0 discriminator 1
 165 0010 08B1     		cbz	r0, .L24
 166              	.LBB4:
  73:src/helper/emhost/emh_module.c **** 		return kGeneralErr;
  74:src/helper/emhost/emh_module.c **** 	}
  75:src/helper/emhost/emh_module.c **** 	
  76:src/helper/emhost/emh_module.c **** 	for (int i = 0; i < 5; i++) {
 167              		.loc 1 76 0
 168 0012 0024     		movs	r4, #0
 169 0014 03E0     		b	.L17
 170              	.L24:
 171              	.LBE4:
  73:src/helper/emhost/emh_module.c **** 		return kGeneralErr;
 172              		.loc 1 73 0
 173 0016 4FF0FF30 		mov	r0, #-1
 174 001a 1AE0     		b	.L15
 175              	.LVL11:
 176              	.L18:
 177              	.LBB5:
 178              		.loc 1 76 0 discriminator 2
 179 001c 0134     		adds	r4, r4, #1
 180              	.LVL12:
 181              	.L17:
 182              		.loc 1 76 0 is_stmt 0 discriminator 1
 183 001e 042C     		cmp	r4, #4
 184 0020 15DC     		bgt	.L25
  77:src/helper/emhost/emh_module.c **** 		if (ATCmdParser_send("AT")
 185              		.loc 1 77 0 is_stmt 1
 186 0022 1048     		ldr	r0, .L26+8
 187 0024 FFF7FEFF 		bl	ATCmdParser_send
 188              	.LVL13:
 189 0028 0028     		cmp	r0, #0
 190 002a F7D0     		beq	.L18
  78:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_recv("OK\r\n")
 191              		.loc 1 78 0
 192 002c 0C48     		ldr	r0, .L26+4
 193 002e FFF7FEFF 		bl	ATCmdParser_recv
 194              	.LVL14:
 195 0032 0028     		cmp	r0, #0
 196 0034 F2D0     		beq	.L18
  79:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_send("AT+UARTE=OFF")
 197              		.loc 1 79 0
 198 0036 0C48     		ldr	r0, .L26+12
 199 0038 FFF7FEFF 		bl	ATCmdParser_send
 200              	.LVL15:
 201 003c 0028     		cmp	r0, #0
 202 003e EDD0     		beq	.L18
  80:src/helper/emhost/emh_module.c **** 		&&  ATCmdParser_recv("OK\r\n")) {
 203              		.loc 1 80 0
 204 0040 0748     		ldr	r0, .L26+4
 205 0042 FFF7FEFF 		bl	ATCmdParser_recv
ARM GAS  /tmp/ccdVCZVK.s 			page 6


 206              	.LVL16:
 207 0046 0028     		cmp	r0, #0
 208 0048 E8D0     		beq	.L18
  81:src/helper/emhost/emh_module.c **** 			return kNoErr;
 209              		.loc 1 81 0
 210 004a 0020     		movs	r0, #0
 211 004c 01E0     		b	.L15
 212              	.L25:
 213              	.LBE5:
  82:src/helper/emhost/emh_module.c **** 		}
  83:src/helper/emhost/emh_module.c **** 	}
  84:src/helper/emhost/emh_module.c **** 
  85:src/helper/emhost/emh_module.c **** 	return kGeneralErr;
 214              		.loc 1 85 0
 215 004e 4FF0FF30 		mov	r0, #-1
 216              	.LVL17:
 217              	.L15:
  86:src/helper/emhost/emh_module.c **** }
 218              		.loc 1 86 0
 219 0052 10BD     		pop	{r4, pc}
 220              	.L20:
  73:src/helper/emhost/emh_module.c **** 	}
 221              		.loc 1 73 0
 222 0054 4FF0FF30 		mov	r0, #-1
 223 0058 FBE7     		b	.L15
 224              	.L27:
 225 005a 00BF     		.align	2
 226              	.L26:
 227 005c 00000000 		.word	.LC4
 228 0060 0C000000 		.word	.LC1
 229 0064 14000000 		.word	.LC2
 230 0068 18000000 		.word	.LC3
 231              		.cfi_endproc
 232              	.LFE7:
 234              		.section	.text.emh_init,"ax",%progbits
 235              		.align	1
 236              		.global	emh_init
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv4-sp-d16
 242              	emh_init:
 243              	.LFB8:
  87:src/helper/emhost/emh_module.c **** 
  88:src/helper/emhost/emh_module.c **** mx_status emh_init(void)
  89:src/helper/emhost/emh_module.c **** {
 244              		.loc 1 89 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248 0000 38B5     		push	{r3, r4, r5, lr}
 249              	.LCFI2:
 250              		.cfi_def_cfa_offset 16
 251              		.cfi_offset 3, -16
 252              		.cfi_offset 4, -12
 253              		.cfi_offset 5, -8
 254              		.cfi_offset 14, -4
ARM GAS  /tmp/ccdVCZVK.s 			page 7


  90:src/helper/emhost/emh_module.c **** 	ATCmdParser_init("\r","\r\n", 1000, false);
 255              		.loc 1 90 0
 256 0002 0023     		movs	r3, #0
 257 0004 4FF47A72 		mov	r2, #1000
 258 0008 0A49     		ldr	r1, .L36
 259 000a 0B48     		ldr	r0, .L36+4
 260 000c FFF7FEFF 		bl	ATCmdParser_init
 261              	.LVL18:
 262              	.LBB6:
  91:src/helper/emhost/emh_module.c **** 		
  92:src/helper/emhost/emh_module.c **** 	for (int i = 0; i < 2; i++) {
 263              		.loc 1 92 0
 264 0010 0024     		movs	r4, #0
 265              	.LVL19:
 266              	.L29:
 267              		.loc 1 92 0 is_stmt 0 discriminator 1
 268 0012 012C     		cmp	r4, #1
 269 0014 0ADC     		bgt	.L34
  93:src/helper/emhost/emh_module.c **** 		if ( kNoErr == emh_module_reset()) {
 270              		.loc 1 93 0 is_stmt 1
 271 0016 FFF7FEFF 		bl	emh_module_reset
 272              	.LVL20:
 273 001a 0546     		mov	r5, r0
 274 001c 08B1     		cbz	r0, .L35
  92:src/helper/emhost/emh_module.c **** 		if ( kNoErr == emh_module_reset()) {
 275              		.loc 1 92 0 discriminator 2
 276 001e 0134     		adds	r4, r4, #1
 277              	.LVL21:
 278 0020 F7E7     		b	.L29
 279              	.L35:
  94:src/helper/emhost/emh_module.c **** #ifdef AT_SUPPORT_ILOP
  95:src/helper/emhost/emh_module.c **** 			ATCmdParser_add_oob("+ILOPEVENT:",	emh_ilop_event_handler);
  96:src/helper/emhost/emh_module.c **** #endif
  97:src/helper/emhost/emh_module.c **** #ifdef AT_SUPPORT_ALISDS
  98:src/helper/emhost/emh_module.c **** 			ATCmdParser_add_oob("+ALINKEVENT:",	emh_alisds_event_handler);
  99:src/helper/emhost/emh_module.c **** #endif			
 100:src/helper/emhost/emh_module.c **** 			ATCmdParser_add_oob("+WEVENT:",		emh_wlan_event_handler);
 280              		.loc 1 100 0
 281 0022 0649     		ldr	r1, .L36+8
 282 0024 0648     		ldr	r0, .L36+12
 283 0026 FFF7FEFF 		bl	ATCmdParser_add_oob
 284              	.LVL22:
 101:src/helper/emhost/emh_module.c **** 			return kNoErr;
 285              		.loc 1 101 0
 286 002a 01E0     		b	.L28
 287              	.L34:
 288              	.LBE6:
 102:src/helper/emhost/emh_module.c **** 		}
 103:src/helper/emhost/emh_module.c **** 	}
 104:src/helper/emhost/emh_module.c **** 
 105:src/helper/emhost/emh_module.c **** 	return kGeneralErr;
 289              		.loc 1 105 0
 290 002c 4FF0FF35 		mov	r5, #-1
 291              	.L28:
 106:src/helper/emhost/emh_module.c **** }
 292              		.loc 1 106 0
 293 0030 2846     		mov	r0, r5
ARM GAS  /tmp/ccdVCZVK.s 			page 8


 294 0032 38BD     		pop	{r3, r4, r5, pc}
 295              	.LVL23:
 296              	.L37:
 297              		.align	2
 298              	.L36:
 299 0034 00000000 		.word	.LC5
 300 0038 04000000 		.word	.LC6
 301 003c 00000000 		.word	emh_wlan_event_handler
 302 0040 08000000 		.word	.LC7
 303              		.cfi_endproc
 304              	.LFE8:
 306              		.section	.text.emh_module_check_ready,"ax",%progbits
 307              		.align	1
 308              		.global	emh_module_check_ready
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 312              		.fpu fpv4-sp-d16
 314              	emh_module_check_ready:
 315              	.LFB9:
 107:src/helper/emhost/emh_module.c **** 
 108:src/helper/emhost/emh_module.c **** mx_status emh_module_check_ready( void )
 109:src/helper/emhost/emh_module.c **** {
 316              		.loc 1 109 0
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 0
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320 0000 08B5     		push	{r3, lr}
 321              	.LCFI3:
 322              		.cfi_def_cfa_offset 8
 323              		.cfi_offset 3, -8
 324              		.cfi_offset 14, -4
 110:src/helper/emhost/emh_module.c **** 	if (  ATCmdParser_send("AT")
 325              		.loc 1 110 0
 326 0002 0848     		ldr	r0, .L43
 327 0004 FFF7FEFF 		bl	ATCmdParser_send
 328              	.LVL24:
 329 0008 28B1     		cbz	r0, .L40
 111:src/helper/emhost/emh_module.c ****        && ATCmdParser_recv("OK\r\n")) {
 330              		.loc 1 111 0
 331 000a 0748     		ldr	r0, .L43+4
 332 000c FFF7FEFF 		bl	ATCmdParser_recv
 333              	.LVL25:
 334 0010 20B1     		cbz	r0, .L41
 112:src/helper/emhost/emh_module.c ****         return kNoErr;
 335              		.loc 1 112 0
 336 0012 0020     		movs	r0, #0
 337              	.L38:
 113:src/helper/emhost/emh_module.c ****     }
 114:src/helper/emhost/emh_module.c **** 	return kGeneralErr;
 115:src/helper/emhost/emh_module.c **** }
 338              		.loc 1 115 0
 339 0014 08BD     		pop	{r3, pc}
 340              	.L40:
 114:src/helper/emhost/emh_module.c **** }
 341              		.loc 1 114 0
 342 0016 4FF0FF30 		mov	r0, #-1
ARM GAS  /tmp/ccdVCZVK.s 			page 9


 343 001a FBE7     		b	.L38
 344              	.L41:
 345 001c 4FF0FF30 		mov	r0, #-1
 346 0020 F8E7     		b	.L38
 347              	.L44:
 348 0022 00BF     		.align	2
 349              	.L43:
 350 0024 14000000 		.word	.LC2
 351 0028 0C000000 		.word	.LC1
 352              		.cfi_endproc
 353              	.LFE9:
 355              		.section	.text.emh_module_get_fw_version,"ax",%progbits
 356              		.align	1
 357              		.global	emh_module_get_fw_version
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	emh_module_get_fw_version:
 364              	.LFB10:
 116:src/helper/emhost/emh_module.c **** 
 117:src/helper/emhost/emh_module.c **** const char *emh_module_get_fw_version(void)
 118:src/helper/emhost/emh_module.c **** {
 365              		.loc 1 118 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 08B5     		push	{r3, lr}
 370              	.LCFI4:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 3, -8
 373              		.cfi_offset 14, -4
 119:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+FWVER?")
 374              		.loc 1 119 0
 375 0002 0748     		ldr	r0, .L50
 376 0004 FFF7FEFF 		bl	ATCmdParser_send
 377              	.LVL26:
 378 0008 30B1     		cbz	r0, .L47
 120:src/helper/emhost/emh_module.c ****        && ATCmdParser_recv("+FWVER:%32[^\r]\r\nOK\r\n", _fw_version))) {
 379              		.loc 1 120 0 discriminator 1
 380 000a 0649     		ldr	r1, .L50+4
 381 000c 0648     		ldr	r0, .L50+8
 382 000e FFF7FEFF 		bl	ATCmdParser_recv
 383              	.LVL27:
 119:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+FWVER?")
 384              		.loc 1 119 0 discriminator 1
 385 0012 18B1     		cbz	r0, .L48
 121:src/helper/emhost/emh_module.c ****         return NULL;
 122:src/helper/emhost/emh_module.c ****     }
 123:src/helper/emhost/emh_module.c **** 	return _fw_version;
 386              		.loc 1 123 0
 387 0014 0348     		ldr	r0, .L50+4
 388              	.L45:
 124:src/helper/emhost/emh_module.c **** }
 389              		.loc 1 124 0
 390 0016 08BD     		pop	{r3, pc}
 391              	.L47:
ARM GAS  /tmp/ccdVCZVK.s 			page 10


 121:src/helper/emhost/emh_module.c ****         return NULL;
 392              		.loc 1 121 0
 393 0018 0020     		movs	r0, #0
 394 001a FCE7     		b	.L45
 395              	.L48:
 396 001c 0020     		movs	r0, #0
 397 001e FAE7     		b	.L45
 398              	.L51:
 399              		.align	2
 400              	.L50:
 401 0020 00000000 		.word	.LC8
 402 0024 00000000 		.word	.LANCHOR0
 403 0028 0C000000 		.word	.LC9
 404              		.cfi_endproc
 405              	.LFE10:
 407              		.section	.text.emh_module_get_tick,"ax",%progbits
 408              		.align	1
 409              		.global	emh_module_get_tick
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	emh_module_get_tick:
 416              	.LFB11:
 125:src/helper/emhost/emh_module.c **** 
 126:src/helper/emhost/emh_module.c **** uint32_t emh_module_get_tick(void)
 127:src/helper/emhost/emh_module.c **** {
 417              		.loc 1 127 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 8
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421 0000 00B5     		push	{lr}
 422              	.LCFI5:
 423              		.cfi_def_cfa_offset 4
 424              		.cfi_offset 14, -4
 425 0002 83B0     		sub	sp, sp, #12
 426              	.LCFI6:
 427              		.cfi_def_cfa_offset 16
 128:src/helper/emhost/emh_module.c **** 	uint32_t tick;
 129:src/helper/emhost/emh_module.c **** 	if (!(ATCmdParser_send("AT+SYSTIME?")
 428              		.loc 1 129 0
 429 0004 0848     		ldr	r0, .L58
 430 0006 FFF7FEFF 		bl	ATCmdParser_send
 431              	.LVL28:
 432 000a 18B9     		cbnz	r0, .L57
 130:src/helper/emhost/emh_module.c **** 	   && ATCmdParser_recv("+SYSTIME:%d\r\nOK\r\n", &tick))) {
 131:src/helper/emhost/emh_module.c **** 		return 0;
 433              		.loc 1 131 0
 434 000c 0020     		movs	r0, #0
 435              	.L52:
 132:src/helper/emhost/emh_module.c **** 	}
 133:src/helper/emhost/emh_module.c **** 	return tick;	
 134:src/helper/emhost/emh_module.c **** }
 436              		.loc 1 134 0
 437 000e 03B0     		add	sp, sp, #12
 438              	.LCFI7:
 439              		.cfi_remember_state
ARM GAS  /tmp/ccdVCZVK.s 			page 11


 440              		.cfi_def_cfa_offset 4
 441              		@ sp needed
 442 0010 5DF804FB 		ldr	pc, [sp], #4
 443              	.L57:
 444              	.LCFI8:
 445              		.cfi_restore_state
 130:src/helper/emhost/emh_module.c **** 	   && ATCmdParser_recv("+SYSTIME:%d\r\nOK\r\n", &tick))) {
 446              		.loc 1 130 0 discriminator 1
 447 0014 01A9     		add	r1, sp, #4
 448 0016 0548     		ldr	r0, .L58+4
 449 0018 FFF7FEFF 		bl	ATCmdParser_recv
 450              	.LVL29:
 129:src/helper/emhost/emh_module.c **** 	   && ATCmdParser_recv("+SYSTIME:%d\r\nOK\r\n", &tick))) {
 451              		.loc 1 129 0 discriminator 1
 452 001c 08B1     		cbz	r0, .L55
 133:src/helper/emhost/emh_module.c **** }
 453              		.loc 1 133 0
 454 001e 0198     		ldr	r0, [sp, #4]
 455 0020 F5E7     		b	.L52
 456              	.L55:
 131:src/helper/emhost/emh_module.c **** 	}
 457              		.loc 1 131 0
 458 0022 0020     		movs	r0, #0
 459 0024 F3E7     		b	.L52
 460              	.L59:
 461 0026 00BF     		.align	2
 462              	.L58:
 463 0028 00000000 		.word	.LC10
 464 002c 0C000000 		.word	.LC11
 465              		.cfi_endproc
 466              	.LFE11:
 468              		.section	.text.emh_runloop,"ax",%progbits
 469              		.align	1
 470              		.global	emh_runloop
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	emh_runloop:
 477              	.LFB12:
 135:src/helper/emhost/emh_module.c **** 
 136:src/helper/emhost/emh_module.c **** extern void cli_loop( void );
 137:src/helper/emhost/emh_module.c **** void emh_runloop(void) {
 478              		.loc 1 137 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI9:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 487              	.L61:
 138:src/helper/emhost/emh_module.c **** 	while (ATCmdParser_process_oob());
 488              		.loc 1 138 0 discriminator 1
 489 0002 FFF7FEFF 		bl	ATCmdParser_process_oob
 490              	.LVL30:
ARM GAS  /tmp/ccdVCZVK.s 			page 12


 491 0006 0028     		cmp	r0, #0
 492 0008 FBD1     		bne	.L61
 139:src/helper/emhost/emh_module.c **** 
 140:src/helper/emhost/emh_module.c **** #ifdef MX_CLI_ENABLE
 141:src/helper/emhost/emh_module.c **** 	cli_loop();
 493              		.loc 1 141 0
 494 000a FFF7FEFF 		bl	cli_loop
 495              	.LVL31:
 142:src/helper/emhost/emh_module.c **** #endif
 143:src/helper/emhost/emh_module.c **** 
 144:src/helper/emhost/emh_module.c **** }
 496              		.loc 1 144 0
 497 000e 08BD     		pop	{r3, pc}
 498              		.cfi_endproc
 499              	.LFE12:
 501              		.section	.bss._fw_version,"aw",%nobits
 502              		.align	2
 503              		.set	.LANCHOR0,. + 0
 506              	_fw_version:
 507 0000 00000000 		.space	32
 507      00000000 
 507      00000000 
 507      00000000 
 507      00000000 
 508              		.section	.rodata.emh_init.str1.4,"aMS",%progbits,1
 509              		.align	2
 510              	.LC5:
 511 0000 0D0A00   		.ascii	"\015\012\000"
 512 0003 00       		.space	1
 513              	.LC6:
 514 0004 0D00     		.ascii	"\015\000"
 515 0006 0000     		.space	2
 516              	.LC7:
 517 0008 2B574556 		.ascii	"+WEVENT:\000"
 517      454E543A 
 517      00
 518              		.section	.rodata.emh_module_get_fw_version.str1.4,"aMS",%progbits,1
 519              		.align	2
 520              	.LC8:
 521 0000 41542B46 		.ascii	"AT+FWVER?\000"
 521      57564552 
 521      3F00
 522 000a 0000     		.space	2
 523              	.LC9:
 524 000c 2B465756 		.ascii	"+FWVER:%32[^\015]\015\012OK\015\012\000"
 524      45523A25 
 524      33325B5E 
 524      0D5D0D0A 
 524      4F4B0D0A 
 525              		.section	.rodata.emh_module_get_tick.str1.4,"aMS",%progbits,1
 526              		.align	2
 527              	.LC10:
 528 0000 41542B53 		.ascii	"AT+SYSTIME?\000"
 528      59535449 
 528      4D453F00 
 529              	.LC11:
 530 000c 2B535953 		.ascii	"+SYSTIME:%d\015\012OK\015\012\000"
ARM GAS  /tmp/ccdVCZVK.s 			page 13


 530      54494D45 
 530      3A25640D 
 530      0A4F4B0D 
 530      0A00
 531              		.section	.rodata.emh_module_reset.str1.4,"aMS",%progbits,1
 532              		.align	2
 533              	.LC0:
 534 0000 41542B52 		.ascii	"AT+REBOOT\000"
 534      45424F4F 
 534      5400
 535 000a 0000     		.space	2
 536              	.LC1:
 537 000c 4F4B0D0A 		.ascii	"OK\015\012\000"
 537      00
 538 0011 000000   		.space	3
 539              	.LC2:
 540 0014 415400   		.ascii	"AT\000"
 541 0017 00       		.space	1
 542              	.LC3:
 543 0018 41542B55 		.ascii	"AT+UARTE=OFF\000"
 543      41525445 
 543      3D4F4646 
 543      00
 544              		.section	.rodata.emh_module_restore_settings.str1.4,"aMS",%progbits,1
 545              		.align	2
 546              	.LC4:
 547 0000 41542B46 		.ascii	"AT+FACTORY\000"
 547      4143544F 
 547      525900
 548              		.text
 549              	.Letext0:
 550              		.file 2 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 551              		.file 3 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 552              		.file 4 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 553              		.file 5 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 554              		.file 6 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/lib/gc
 555              		.file 7 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 556              		.file 8 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 557              		.file 9 "/home/wumingju/Documents/aos/AliOS-Things/build/compiler/gcc-arm-none-eabi/Linux64/arm-no
 558              		.file 10 "src/helper/mx_common.h"
 559              		.file 11 "src/helper/emhost/emh_arg.h"
 560              		.file 12 "src/helper/emhost/ATCmdParser/ATCmdParser.h"
ARM GAS  /tmp/ccdVCZVK.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 emh_module.c
     /tmp/ccdVCZVK.s:18     .text.emh_ev_unknown:0000000000000000 $t
     /tmp/ccdVCZVK.s:25     .text.emh_ev_unknown:0000000000000000 emh_ev_unknown
     /tmp/ccdVCZVK.s:39     .text.emh_module_reset:0000000000000000 $t
     /tmp/ccdVCZVK.s:46     .text.emh_module_reset:0000000000000000 emh_module_reset
     /tmp/ccdVCZVK.s:129    .text.emh_module_reset:000000000000005c $d
     /tmp/ccdVCZVK.s:137    .text.emh_module_restore_settings:0000000000000000 $t
     /tmp/ccdVCZVK.s:144    .text.emh_module_restore_settings:0000000000000000 emh_module_restore_settings
     /tmp/ccdVCZVK.s:227    .text.emh_module_restore_settings:000000000000005c $d
     /tmp/ccdVCZVK.s:235    .text.emh_init:0000000000000000 $t
     /tmp/ccdVCZVK.s:242    .text.emh_init:0000000000000000 emh_init
     /tmp/ccdVCZVK.s:299    .text.emh_init:0000000000000034 $d
     /tmp/ccdVCZVK.s:307    .text.emh_module_check_ready:0000000000000000 $t
     /tmp/ccdVCZVK.s:314    .text.emh_module_check_ready:0000000000000000 emh_module_check_ready
     /tmp/ccdVCZVK.s:350    .text.emh_module_check_ready:0000000000000024 $d
     /tmp/ccdVCZVK.s:356    .text.emh_module_get_fw_version:0000000000000000 $t
     /tmp/ccdVCZVK.s:363    .text.emh_module_get_fw_version:0000000000000000 emh_module_get_fw_version
     /tmp/ccdVCZVK.s:401    .text.emh_module_get_fw_version:0000000000000020 $d
     /tmp/ccdVCZVK.s:408    .text.emh_module_get_tick:0000000000000000 $t
     /tmp/ccdVCZVK.s:415    .text.emh_module_get_tick:0000000000000000 emh_module_get_tick
     /tmp/ccdVCZVK.s:463    .text.emh_module_get_tick:0000000000000028 $d
     /tmp/ccdVCZVK.s:469    .text.emh_runloop:0000000000000000 $t
     /tmp/ccdVCZVK.s:476    .text.emh_runloop:0000000000000000 emh_runloop
     /tmp/ccdVCZVK.s:502    .bss._fw_version:0000000000000000 $d
     /tmp/ccdVCZVK.s:506    .bss._fw_version:0000000000000000 _fw_version
     /tmp/ccdVCZVK.s:509    .rodata.emh_init.str1.4:0000000000000000 $d
     /tmp/ccdVCZVK.s:519    .rodata.emh_module_get_fw_version.str1.4:0000000000000000 $d
     /tmp/ccdVCZVK.s:526    .rodata.emh_module_get_tick.str1.4:0000000000000000 $d
     /tmp/ccdVCZVK.s:532    .rodata.emh_module_reset.str1.4:0000000000000000 $d
     /tmp/ccdVCZVK.s:545    .rodata.emh_module_restore_settings.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
ATCmdParser_send
ATCmdParser_recv
ATCmdParser_init
ATCmdParser_add_oob
emh_wlan_event_handler
ATCmdParser_process_oob
cli_loop
